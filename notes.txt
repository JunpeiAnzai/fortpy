Unit Testing
------

## Removal of `class` Parameters for Non-embedded Executables #38

When the first argument is an instance of a user-derived type in a
subroutine/function, we remove it because fortpy assumes that the
subroutine is embedded in the type; but that is not always the
case. We need to explicitly check the executables list for the type
and make sure it is embedded before removing that argument.

## Complex Functions #37

For function output under target name [default], we need to have the
[default] variable able to be declared as <global> and have its value
changed using <assignment> so that complicated functions can be tuned
by the user.

The reason we need to introduce maximum flexibility is that a function
may declare its output type using a function of the input parameters;
or if the functions output is allocatable, then we need the user to
specify the output type in advance so that compilation succeeds.

The fix for this will involve switching out the hard-coded
function_fpy variable declaration in elements.py for a conditional
statement that checks the test specification's list of globals first
for a [default] variable; if it exists, then do nothing. The existing
code for initializing and assigning values to the variables will
suffice, we just need to change the name that gets output from
[default] to the fortpy hard-coded value.

## Unit Testing Embedded Executables #36

We need to show a warning when a unit test is defined for a subroutine
or function that is declared inside of another subroutine. Since they
are buried, they can't be made public in the module for unit testing
purposes.

Another option is to cut and paste the code automatically so that its
definition is outside the subroutine contains section and then it
could be made public. This is more user-friendly. The cut and paste
should be simple since we already have the start and stop lines for
the subroutine and could just move them outside of the parent
subroutine completely. The only complexity that emerges is:

if there is only one nested executable, the contains statement is
invalid and would have to be removed.  if there are multiple nested
executables that reference each other, then moving one of them out,
but not the others, will result in compilation failures. Although
fortpy can detect most dependencies and track them down, there are a
couple of cases where it doesn't work well for functions (the parser
needs to be revisited). If we can trust the dependency listings, we
will know which of the executables to cut out of the contains section.

## Parser does not recognize target as a pointer #30

No description specified by Wiley.

## No isense Support for Fortran Program Files #12

Go to an open line anywhere in a fortran program and type any
key. Raises a deferred error IndexError("string index out of range",).

## `fortpy-show-doc` Integration with `fortpy-el` #39

The full documentation for a subroutine/function can be called up
using M-? in emacs. However, it currently only works for executables
that are defined in the same module as the reference that calls it. If
you open derivative_structure_generator.f90, go to line 339 and try to
call up the docs, you get

deferred error : (error "\"AttributeError(\\\"'NoneType' object has no
attribute 'fulldoc'\\\",)\"")

The same thing happens on line 328 for get_spaceGroup. However, on
line 481, find_permutation_of_group works since it is defined within
the same module.

## Goto and Definition Retrieval #7

The fortpy.el file has support for getting definitions and navigating
to definitions in code files. Fortpy doesn't support this yet. We have
the character and line functions and attributes already available to
do this easily, we just need to implement it.

Also, the goto from fortpy.el still has some complicated remnants from
jedi that we don't need. Python needs lots of recursion to give good
isense support, but Fortran doesn't. Our goto recommendations will be
extremely precise and we don't need all the recursion support. Those
methods can be deleted from fortpy.el or updated to work with it.
